---
swagger: "2.0"
info:
  description: "This is a simple Library API"
  version: "1.0.0"
  title: "Simple Library API"
  contact:
    email: "you@your-company.com"
host: "115.178.77.137:8000"
basePath: "/v1"
tags:
- name: "admins"
  description: "Secured Admin-only calls"
- name: "developers"
  description: "Operations available to regular developers"
schemes:
- "http"
paths:
  /books:
    get:
      tags:
      - "developers"
      summary: "searches inventory"
      description: "By passing in the appropriate options, you can search for\navailable\
        \ inventory in the system\n"
      operationId: "searchInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        "400":
          description: "bad input parameter"
      x-swagger-router-controller: "Developers"
    post:
      tags:
      - "developers"
      summary: "adds an inventory item"
      description: "Adds an item to the system"
      operationId: "addInventory"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "inventoryItem"
        description: "Inventory item to add"
        required: false
        schema:
          $ref: "#/definitions/Book"
      responses:
        "200":
          description: "item created"
        "400":
          description: "invalid input, object invalid"
        "409":
          description: "an existing item already exists"
      x-swagger-router-controller: "Developers"
  /books/{id}:
    get:
      tags:
      - "developers"
      summary: "returns a specific book content"
      description: "when a book id is provided, this endpoint returns book details\
        \ by book id"
      operationId: "getBook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "book id"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
        "401":
          description: "bad input parameter"
        "404":
          description: "not found"
      x-swagger-router-controller: "Developers"
    put:
      tags:
      - "developers"
      summary: "modifies a specified book content"
      description: "when a book id is provided, this endpoint modifies book content\
        \ by book id"
      operationId: "modifyBook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "book id"
        required: true
        type: "string"
      - in: "body"
        name: "book details"
        description: "book details"
        required: false
        schema:
          $ref: "#/definitions/BookUpdate"
      responses:
        "200":
          description: "OK"
        "401":
          description: "bad input parameter"
        "404":
          description: "not found"
      x-swagger-router-controller: "Developers"
    delete:
      tags:
      - "developers"
      summary: "deletes a single book object"
      description: "when a book id is provided, it deletes a single book from the\
        \ database"
      operationId: "deleteBook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "book id"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
        "401":
          description: "bad input parameter"
        "404":
          description: "not found"
      x-swagger-router-controller: "Developers"
definitions:
  Book:
    type: "object"
    required:
    - "author"
    - "title"
    properties:
      title:
        type: "string"
      author:
        type: "string"
    example:
      author: "author"
      title: "title"
  BookUpdate:
    type: "object"
    required:
    - "newData"
    properties:
      newData:
        type: "object"
        properties:
          title:
            type: "string"
          author:
            type: "string"
        required:
        - "author"
        - "title"
    example:
      newData: "{}"
